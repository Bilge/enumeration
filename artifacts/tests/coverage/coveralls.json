{"service_name":"travis-ci","service_job_id":"10150203","git":{"branch":"(detached from 9f5f22c)","head":{"id":"9f5f22cf1d57da073fe8a5fff0c5a69284ada0d9","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Repository maintenance. Closes #16, closes #17."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/enumeration.git"}]},"run_at":"2013-08-13 10:49:39 +0000","source_files":[{"name":"Eloquent\/Enumeration\/Enumeration.php","source":"<?php\n\n\/*\n * This file is part of the Enumeration package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Enumeration;\n\nuse ReflectionClass;\n\n\/**\n * Abstract base class for C++ style enumerations.\n *\/\nabstract class Enumeration extends Multiton\n{\n    \/**\n     * Returns a single member by value.\n     *\n     * @param scalar       $value           The value associated with the member.\n     * @param boolean|null $isCaseSensitive True if the search should be case sensitive.\n     *\n     * @return Enumeration                        The first member with the supplied value.\n     * @throws Exception\\UndefinedMemberException If no associated member is found.\n     *\/\n    final public static function memberByValue($value, $isCaseSensitive = null)\n    {\n        return static::memberBy('value', $value, $isCaseSensitive);\n    }\n\n    \/**\n     * Returns a single member by value. Additionally returns a default if no\n     * associated member is found.\n     *\n     * @param scalar        $value           The value associated with the member.\n     * @param Multiton|null $default         The default value to return.\n     * @param boolean|null  $isCaseSensitive True if the search should be case sensitive.\n     *\n     * @return Enumeration The first member with the supplied value, or the default value.\n     *\/\n    final public static function memberByValueWithDefault(\n        $value,\n        Multiton $default = null,\n        $isCaseSensitive = null\n    ) {\n        return static::memberByWithDefault(\n            'value',\n            $value,\n            $default,\n            $isCaseSensitive\n        );\n    }\n\n    \/**\n     * Returns the value of this member.\n     *\n     * @return scalar The value of this member.\n     *\/\n    final public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * Initializes the members of this enumeration based upon its class\n     * constants.\n     *\n     * Each constant becomes a member with a string key equal to the constant's\n     * name, and a value equal to that of the constant's value.\n     *\/\n    final protected static function initializeMembers()\n    {\n        $reflector = new ReflectionClass(get_called_class());\n\n        foreach ($reflector->getConstants() as $key => $value) {\n            new static($key, $value);\n        }\n    }\n\n    \/**\n     * Construct and register a new enumeration member.\n     *\n     * @param string $key   The string key to associate with this member.\n     * @param scalar $value The value of this member.\n     *\n     * @throws Exception\\ExtendsConcreteException If the constructed member has an invalid inheritance hierarchy.\n     *\/\n    protected function __construct($key, $value)\n    {\n        parent::__construct($key);\n\n        $this->value = $value;\n    }\n\n    \/**\n     * The value of this member.\n     *\n     * @var scalar\n     *\/\n    private $value;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,null,null,12,null,12,12,11,11,null,null,null,null,null,null,null,null,null,null,null,12,null,11,11,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Enumeration\/Exception\/ExtendsConcreteException.php","source":"<?php\n\n\/*\n * This file is part of the Enumeration package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Enumeration\\Exception;\n\nuse Exception;\nuse LogicException;\n\n\/**\n * The supplied member extends an already concrete base class.\n *\n * This exception exists to prevent otherwise valid inheritance structures\n * that are not valid in the context of enumerations.\n *\/\nfinal class ExtendsConcreteException extends LogicException\n{\n    \/**\n     * Construct a new extends concrete exception.\n     *\n     * @param string    $className   The class of the supplied member.\n     * @param string    $parentClass The concrete parent class name.\n     * @param Exception $previous    The cause, if available.\n     *\/\n    public function __construct(\n        $className,\n        $parentClass,\n        Exception $previous = null\n    ) {\n        $this->className = $className;\n        $this->parentClass = $parentClass;\n\n        parent::__construct(\n            sprintf(\n                \"Class '%s' cannot extend concrete class '%s'.\",\n                $this->className(),\n                $this->parentClass()\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the class name of the supplied member.\n     *\n     * @return string The class name.\n     *\/\n    public function className()\n    {\n        return $this->className;\n    }\n\n    \/**\n     * Get the parent class name.\n     *\n     * @return string The parent class name.\n     *\/\n    public function parentClass()\n    {\n        return $this->parentClass;\n    }\n\n    private $className;\n    private $parentClass;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null]},{"name":"Eloquent\/Enumeration\/Exception\/UndefinedMemberException.php","source":"<?php\n\n\/*\n * This file is part of the Enumeration package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Enumeration\\Exception;\n\nuse Exception;\nuse LogicException;\n\n\/**\n * The requested member was not found.\n *\/\nfinal class UndefinedMemberException extends LogicException implements\n    UndefinedMemberExceptionInterface\n{\n    \/**\n     * Construct a new undefined member exception.\n     *\n     * @param string    $className The name of the class from which the member was requested.\n     * @param string    $property  The name of the property used to search for the member.\n     * @param mixed     $value     The value of the property used to search for the member.\n     * @param Exception $previous  The cause, if available.\n     *\/\n    public function __construct($className, $property, $value, Exception $previous = null)\n    {\n        $this->className = $className;\n        $this->property = $property;\n        $this->value = $value;\n\n        parent::__construct(\n            sprintf(\n                \"No member with %s equal to %s defined in class '%s'.\",\n                $this->property(),\n                var_export($this->value(), true),\n                $this->className()\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the class name.\n     *\n     * @return string The class name.\n     *\/\n    public function className()\n    {\n        return $this->className;\n    }\n\n    \/**\n     * Get the property name.\n     *\n     * @return string The property name.\n     *\/\n    public function property()\n    {\n        return $this->property;\n    }\n\n    \/**\n     * Get the value of the property used to search for the member.\n     *\n     * @return mixed The value.\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    private $className;\n    private $property;\n    private $value;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,1,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null]},{"name":"Eloquent\/Enumeration\/Exception\/UndefinedMemberExceptionInterface.php","source":"<?php\n\n\/*\n * This file is part of the Enumeration package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Enumeration\\Exception;\n\n\/**\n * The interface implemented by exceptions that are thrown when an undefined\n * member is requested.\n *\/\ninterface UndefinedMemberExceptionInterface\n{\n    \/**\n     * Get the class name.\n     *\n     * @return string The class name.\n     *\/\n    public function className();\n\n    \/**\n     * Get the property name.\n     *\n     * @return string The property name.\n     *\/\n    public function property();\n\n    \/**\n     * Get the value of the property used to search for the member.\n     *\n     * @return mixed The value.\n     *\/\n    public function value();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Enumeration\/Multiton.php","source":"<?php\n\n\/*\n * This file is part of the Enumeration package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Enumeration;\n\nuse Exception as NativeException;\nuse ReflectionObject;\n\n\/**\n * Base class for Java-style enumerations.\n *\/\nabstract class Multiton\n{\n    \/**\n     * Returns an array of all members in this multiton.\n     *\n     * @return array<string,Multiton> All members.\n     *\/\n    final public static function members()\n    {\n        $class = get_called_class();\n        if (!array_key_exists($class, self::$members)) {\n            self::$members[$class] = array();\n            static::initializeMembers();\n        }\n\n        return self::$members[$class];\n    }\n\n    \/**\n     * Returns a single member by string key.\n     *\n     * @param string       $key             The string key associated with the member.\n     * @param boolean|null $isCaseSensitive True if the search should be case sensitive.\n     *\n     * @return Multiton                                    The member associated with the given string key.\n     * @throws Exception\\UndefinedMemberExceptionInterface If no associated member is found.\n     *\/\n    final public static function memberByKey($key, $isCaseSensitive = null)\n    {\n        return static::memberBy('key', $key, $isCaseSensitive);\n    }\n\n    \/**\n     * Returns a single member by string key. Additionally returns a default if\n     * no associated member is found.\n     *\n     * @param string        $key             The string key associated with the member.\n     * @param Multiton|null $default         The default value to return.\n     * @param boolean|null  $isCaseSensitive True if the search should be case sensitive.\n     *\n     * @return Multiton The member associated with the given string key, or the default value.\n     *\/\n    final public static function memberByKeyWithDefault(\n        $key,\n        Multiton $default = null,\n        $isCaseSensitive = null\n    ) {\n        return static::memberByWithDefault(\n            'key',\n            $key,\n            $default,\n            $isCaseSensitive\n        );\n    }\n\n    \/**\n     * Returns a single member by comparison with the result of an accessor\n     * method.\n     *\n     * @param string       $property        The name of the property (accessor method) to match.\n     * @param mixed        $value           The value to match.\n     * @param boolean|null $isCaseSensitive True if the search should be case sensitive.\n     *\n     * @return Multiton                                    The first member for which $member->{$property}() === $value.\n     * @throws Exception\\UndefinedMemberExceptionInterface If no associated member is found.\n     *\/\n    final public static function memberBy(\n        $property,\n        $value,\n        $isCaseSensitive = null\n    ) {\n        $member = static::memberByWithDefault(\n            $property,\n            $value,\n            null,\n            $isCaseSensitive\n        );\n        if (null === $member) {\n            throw static::createUndefinedMemberException(\n                get_called_class(),\n                $property,\n                $value\n            );\n        }\n\n        return $member;\n    }\n\n    \/**\n     * Returns a single member by comparison with the result of an accessor\n     * method. Additionally returns a default if no associated member is found.\n     *\n     * @param string        $property        The name of the property (accessor method) to match.\n     * @param mixed         $value           The value to match.\n     * @param Multiton|null $default         The default value to return.\n     * @param boolean|null  $isCaseSensitive True if the search should be case sensitive.\n     *\n     * @return Multiton|null The first member for which $member->{$property}() === $value, or the default value.\n     *\/\n    final public static function memberByWithDefault(\n        $property,\n        $value,\n        Multiton $default = null,\n        $isCaseSensitive = null\n    ) {\n        if (null === $isCaseSensitive) {\n            $isCaseSensitive = true;\n        }\n        if (!$isCaseSensitive && is_scalar($value)) {\n            $value = strtoupper(strval($value));\n        }\n\n        return static::memberByPredicateWithDefault(\n            function (Multiton $member) use (\n                $property,\n                $value,\n                $isCaseSensitive\n            ) {\n                $memberValue = $member->{$property}();\n                if (!$isCaseSensitive && is_scalar($memberValue)) {\n                    $memberValue = strtoupper(strval($memberValue));\n                }\n\n                return $memberValue === $value;\n            },\n            $default\n        );\n    }\n\n    \/**\n     * Returns a single member by predicate callback.\n     *\n     * @param callback $predicate The predicate applies to the member to find a match.\n     *\n     * @return Multiton                                    The first member for which $predicate($member) evaluates to boolean true.\n     * @throws Exception\\UndefinedMemberExceptionInterface If no associated member is found.\n     *\/\n    final public static function memberByPredicate($predicate)\n    {\n        $member = static::memberByPredicateWithDefault($predicate);\n        if (null === $member) {\n            throw static::createUndefinedMemberException(\n                get_called_class(),\n                '<callback>',\n                '<callback>'\n            );\n        }\n\n        return $member;\n    }\n\n    \/**\n     * Returns a single member by predicate callback. Additionally returns a\n     * default if no associated member is found.\n     *\n     * @param callback      $predicate The predicate applies to the member to find a match.\n     * @param Multiton|null $default   The default value to return.\n     *\n     * @return Multiton The first member for which $predicate($member) evaluates to boolean true, or the default value.\n     *\/\n    final public static function memberByPredicateWithDefault(\n        $predicate,\n        Multiton $default = null\n    ) {\n        foreach (static::members() as $member) {\n            if ($predicate($member)) {\n                return $member;\n            }\n        }\n\n        return $default;\n    }\n\n    \/**\n     * Maps static method calls to members.\n     *\n     * @param string $key       The string key associated with the member.\n     * @param array  $arguments Ignored.\n     *\n     * @return Multiton                                    The member associated with the given string key.\n     * @throws Exception\\UndefinedMemberExceptionInterface If no associated member is found.\n     *\/\n    final public static function __callStatic($key, array $arguments)\n    {\n        return static::memberByKey($key);\n    }\n\n    \/**\n     * Returns the string key of this member.\n     *\n     * @return string The associated string key of this member.\n     *\/\n    final public function key()\n    {\n        return $this->key;\n    }\n\n    \/**\n     * Check if this member is in the specified list of members.\n     *\n     * @param Multiton $a     The first member to check.\n     * @param Multiton $b     The second member to check.\n     * @param Multiton $c,... Additional members to check.\n     *\n     * @return boolean True if this member is in the specified list of members.\n     *\/\n    final public function anyOf(Multiton $a, Multiton $b)\n    {\n        return $this->anyOfArray(func_get_args());\n    }\n\n    \/**\n     * Check if this member is in the specified list of members.\n     *\n     * @param array<Multiton> $values An array of members to search.\n     *\n     * @return boolean True if this member is in the specified list of members.\n     *\/\n    final public function anyOfArray(array $values)\n    {\n        return in_array($this, $values, true);\n    }\n\n    \/**\n     * Returns a string representation of this member.\n     *\n     * Unless overridden, this is simply the string key.\n     *\n     * @return string\n     *\/\n    public function __toString()\n    {\n        return $this->key();\n    }\n\n    \/**\n     * Override this method in child classes to implement one-time\n     * initialization for a multiton class.\n     *\n     * This method is called the first time the members of a multiton are\n     * accessed. It is called via late static binding, and hence can be\n     * overridden in child classes.\n     *\/\n    protected static function initializeMembers() {}\n\n    \/**\n     * Override this method in child classes to implement custom undefined\n     * member exceptions for a multiton class.\n     *\n     * @param string               $className\n     * @param string               $property\n     * @param mixed                $value\n     * @param NativeException|null $previous\n     *\n     * @return UndefinedMemberExceptionInterface\n     *\/\n    protected static function createUndefinedMemberException(\n        $className,\n        $property,\n        $value,\n        NativeException $previous = null\n    ) {\n        return new Exception\\UndefinedMemberException(\n            $className,\n            $property,\n            $value,\n            $previous\n        );\n    }\n\n    \/**\n     * Construct and register a new multiton member.\n     *\n     * If you override the constructor in a child class, you MUST call the parent\n     * constructor. Calling this constructor is the only way to set the string\n     * key for this member, and to ensure that the member is correctly\n     * registered.\n     *\n     * @param string $key The string key to associate with this member.\n     *\n     * @throws Exception\\ExtendsConcreteException If the constructed member has an invalid inheritance hierarchy.\n     *\/\n    protected function __construct($key)\n    {\n        $this->key = $key;\n\n        self::registerMember($this);\n    }\n\n    \/**\n     * Registers the supplied member.\n     *\n     * Do not attempt to call this method directly. Instead, ensure that\n     * Multiton::__construct() is called from any child classes, as this will\n     * also handle registration of the member.\n     *\n     * @param  Multiton                           $member The member to register.\n     * @throws Exception\\ExtendsConcreteException If the supplied member has an invalid inheritance hierarchy.\n     *\/\n    private static function registerMember(self $member)\n    {\n        $reflector = new ReflectionObject($member);\n        $parentClass = $reflector->getParentClass();\n        if (!$parentClass->isAbstract()) {\n            throw new Exception\\ExtendsConcreteException(\n                get_class($member),\n                $parentClass->getName()\n            );\n        }\n\n        self::$members[get_called_class()][$member->key()] = $member;\n    }\n\n    \/**\n     * Array of all members of all multiton and enumeration classes.\n     *\n     * Members are keyed by class name and member key string.\n     *\n     * @var array<string,array<string,Multiton>>\n     *\/\n    private static $members = array();\n\n    \/**\n     * String key associated with this member.\n     *\n     * @var string\n     *\/\n    private $key;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,22,19,19,18,null,21,null,null,null,null,null,null,null,null,null,null,null,null,null,20,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21,21,21,21,null,21,20,3,3,3,null,3,null,null,17,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21,21,21,21,4,4,null,21,null,20,20,20,null,20,20,4,4,null,20,21,null,21,null,null,null,null,null,null,null,null,null,null,null,null,2,2,1,1,1,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,21,17,null,21,null,7,null,null,null,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,null,21,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,4,4,4,null,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19,null,19,18,null,null,null,null,null,null,null,null,null,null,null,null,null,19,19,19,1,1,1,1,null,null,18,18,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}